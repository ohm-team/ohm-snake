/*! For license information please see main.c5f3f785cf20f60145d5.js.LICENSE.txt */
!function(){var e={608:function(e){var t,o,n,i,a;t=console.log,o=console.warn,n=console.error,i=console.debug,a={unbind:function(){console.log=t,console.warn=o,console.error=n,console.debug=i},bind:function(e,a){if("function"!=typeof e)return console.error("You must pass a valid callback function."),!1;a=Boolean(a);const r="info",s="warn",d="error",c="debug";console.log=console.info=function(){t&&(a||t.call(console,...arguments),e(r,arguments))},console.warn=function(){o&&(a||o.call(console,...arguments),e(s,arguments))},console.error=function(){n&&(a||n.call(console,...arguments),e(d,arguments))},console.debug=function(){i&&(a||i.call(console,...arguments),e(c,arguments))}}},void 0!==e.exports?e.exports=a:window&&"object"==typeof window?window.ConsoleSubscriber=a:console.error("Failed to export module.")},505:function(e,t,o){"use strict";o.r(t),o.d(t,{ImageCapture:function(){return n}});let n=window.ImageCapture;void 0===n&&(n=class{constructor(e){if("video"!==e.kind)throw new DOMException("NotSupportedError");this._videoStreamTrack=e,"readyState"in this._videoStreamTrack||(this._videoStreamTrack.readyState="live"),this._previewStream=new MediaStream([e]),this.videoElement=document.createElement("video"),this.videoElementPlaying=new Promise((e=>{this.videoElement.addEventListener("playing",e)})),HTMLMediaElement?this.videoElement.srcObject=this._previewStream:this.videoElement.src=URL.createObjectURL(this._previewStream),this.videoElement.muted=!0,this.videoElement.setAttribute("playsinline",""),this.videoElement.play(),this.canvasElement=document.createElement("canvas"),this.canvas2dContext=this.canvasElement.getContext("2d")}get videoStreamTrack(){return this._videoStreamTrack}getPhotoCapabilities(){return new Promise((function(e,t){const o={current:0,min:0,max:0};e({exposureCompensation:o,exposureMode:"none",fillLightMode:"none",focusMode:"none",imageHeight:o,imageWidth:o,iso:o,redEyeReduction:!1,whiteBalanceMode:"none",zoom:o}),t(new DOMException("OperationError"))}))}setOptions(e={}){return new Promise((function(e,t){}))}takePhoto(){const e=this;return new Promise((function(t,o){if("live"!==e._videoStreamTrack.readyState)return o(new DOMException("InvalidStateError"));e.videoElementPlaying.then((()=>{try{e.canvasElement.width=e.videoElement.videoWidth,e.canvasElement.height=e.videoElement.videoHeight,e.canvas2dContext.drawImage(e.videoElement,0,0),e.canvasElement.toBlob(t)}catch(e){o(new DOMException("UnknownError"))}}))}))}grabFrame(){const e=this;return new Promise((function(t,o){if("live"!==e._videoStreamTrack.readyState)return o(new DOMException("InvalidStateError"));e.videoElementPlaying.then((()=>{try{e.canvasElement.width=e.videoElement.videoWidth,e.canvasElement.height=e.videoElement.videoHeight,e.canvas2dContext.drawImage(e.videoElement,0,0),t(window.createImageBitmap(e.canvasElement))}catch(e){o(new DOMException("UnknownError"))}}))}))}}),window.ImageCapture=n},90:function(e,t,o){"use strict";o.r(t)},688:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.enableMobileConsole=void 0;const i=n(o(608));t.enableMobileConsole=()=>{const e=[];i.default.bind(((t,o)=>{5===e.length&&e.shift(),e.push({category:t,message:o[0]}),document.getElementById("console").innerHTML=e.map((e=>`<p>${e.message}</p>`)).join("")}))}},203:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},607:function(e,t,o){"use strict";var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(i,a){function r(e){try{d(n.next(e))}catch(e){a(e)}}function s(e){try{d(n.throw(e))}catch(e){a(e)}}function d(e){var t;e.done?i(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}d((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const i=o(688),a=o(341),r=o(717),s=o(614);o(203),o(90);const d=$("#startButton"),c=$("#preloader"),l=$("#start"),h=$("#game"),u=$("#nameInput"),m=e=>n(void 0,void 0,void 0,(function*(){try{console.log("start game"),h.show(),l.hide(),s.setUpUser(e),s.saySomething(s.PHRASES.HELLO),yield r.takePhoto()}catch(e){alert(e)}}));window.onload=()=>n(void 0,void 0,void 0,(function*(){i.enableMobileConsole(),yield n(void 0,void 0,void 0,(function*(){c.show(),h.hide(),l.hide(),yield n(void 0,void 0,void 0,(function*(){return Promise.all([r.initImageCapture(),s.initVoiceService(),a.initHeadControl()]).then((()=>{c.hide(),l.show()})).catch((e=>{console.log(e)}))})),u.on("input",(()=>{u.val()?d.prop("disabled",!1):d.prop("disabled",!0)})),d.click((()=>n(void 0,void 0,void 0,(function*(){yield m(u.val())}))))}))}))},800:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o={mouseOpeningTreshold:.6,mouseClosingTreshold:.5,headMovementStartedTreshold:.15,headMovementStoppedTreshold:.08};class n extends EventTarget{constructor(e,t){super(),this.movementLocks={vertical:!1,horizontal:!1,mouseOpened:!1},this.state={isLoaded:!1,isDetected:!1,isEnabled:!1},this.gl=null,this.cv=null,this.videoTexture=null,this.videoTransformMat2=null,this.glHeadSearchDrawShaderProgram=null,this.headSearchUniformXys=null,this.headSearchUniformVideoTransformMat2=null,this.handleMouseOpening=e=>{if(e.ry<-1*this.settings.headMovementStartedTreshold||e.ry>this.settings.headMovementStartedTreshold)return;let t=5*(e.expressions[0]-.2);return t=Math.min(Math.max(t,0),1),t>this.settings.mouseOpeningTreshold&&!this.movementLocks.mouseOpened?(this.movementLocks.mouseOpened=!0,void this.dispatchEvent(new Event("mouse opened"))):t<this.settings.mouseClosingTreshold&&this.movementLocks.mouseOpened?(this.movementLocks.mouseOpened=!1,void this.dispatchEvent(new Event("mouse closed"))):void 0},this.handleMove=e=>{0!==e.rx&&this.handleAxisMovement({axis:"vertical",axisPosition:e.rx,maxValue:"down",minValue:"up"}),0!==e.ry&&this.handleAxisMovement({axis:"horizontal",axisPosition:e.ry,maxValue:"left",minValue:"right"})},this.handleAxisMovement=({axis:e,axisPosition:t,maxValue:o,minValue:n})=>t<-1*this.settings.headMovementStartedTreshold&&!this.movementLocks[e]?(this.movementLocks[e]=!0,void this.dispatchEvent(new Event(n))):t>this.settings.headMovementStartedTreshold&&!this.movementLocks[e]?(this.movementLocks[e]=!0,void this.dispatchEvent(new Event(o))):void(t>-1*this.settings.headMovementStoppedTreshold&&t<this.settings.headMovementStoppedTreshold&&(this.movementLocks[e]=!1)),this.settings=Object.assign(Object.assign({},o),t),window.JEEFACEFILTERAPI.init({canvasId:e,NNCPath:"./vendor/",animateDelay:20,callbackReady:(e,o)=>{if(e)return(e="WEBCAM_UNAVAILABLE")?void(t.onCameraPersmissionFailed&&t.onCameraPersmissionFailed()):void console.error("AN ERROR HAPPENS. SORRY BRO :( . ERR =",e);this.gl=o.GL,this.videoTexture=o.videoTexture,this.videoTransformMat2=o.videoTransformMat2,this.cv=o.canvasElement,this.initHeadSearchDraw(),this.state.isLoaded=!0,t.onReady&&t.onReady()},callbackTrack:e=>{this.state.isEnabled&&(this.drawHeadSearch(e),this.handleMove(e),this.handleMouseOpening(e))}})}toggle(e){return this.state.isEnabled===e||(this.state.isEnabled=e),!0}compileShader(e,t,o){const n=this.gl.createShader(t);return this.gl.shaderSource(n,e),this.gl.compileShader(n),this.gl.getShaderParameter(n,this.gl.COMPILE_STATUS)?n:(alert("ERROR IN "+o+" SHADER: "+this.gl.getShaderInfoLog(n)),null)}initHeadSearchDraw(){const e=this.compileShader("\n      attribute vec2 aat_position;\n      varying vec2 vUV;\n      \n      void main(void) {\n        gl_Position = vec4(aat_position, 0., 1.);\n        vUV = 0.5 + 0.5 * aat_position;\n        vUV.x = 1.-vUV.x; // mirror diplay\n      }",this.gl.VERTEX_SHADER,"VERTEX"),t=this.compileShader("\n      precision lowp float;\n      varying vec2 vUV;\n      \n      uniform sampler2D samplerVideo;\n      uniform mat2 videoTransformMat2;\n      uniform vec3 uxys;\n      \n      void main(void) {\n        vec2 uvVideoCentered = 2.0 * videoTransformMat2 * (vUV - 0.5);\n        vec2 uvVideo = uvVideoCentered + 0.5;\n        vec3 colorVideo = texture2D(samplerVideo, uvVideo).rgb;\n        vec2 pos = vUV*2.-vec2(1.,1.);\n        vec2 isInside = step(uxys.xy-uxys.z*vec2(1.,1.), pos);\n        isInside *= step(pos, uxys.xy+uxys.z*vec2(1.,1.));\n        vec2 blendCenterFactor = abs(pos-uxys.xy) / uxys.z;\n        float alpha = isInside.x * isInside.y * pow(max(blendCenterFactor.x, blendCenterFactor.y), 3.);\n        vec3 color = mix(colorVideo, vec3(0.,0.6,1.), alpha);\n        gl_FragColor = vec4(color,1.);\n      }",this.gl.FRAGMENT_SHADER,"FRAGMENT");this.glHeadSearchDrawShaderProgram=this.gl.createProgram(),this.gl.attachShader(this.glHeadSearchDrawShaderProgram,e),this.gl.attachShader(this.glHeadSearchDrawShaderProgram,t),this.gl.linkProgram(this.glHeadSearchDrawShaderProgram);const o=this.gl.getUniformLocation(this.glHeadSearchDrawShaderProgram,"samplerVideo");this.headSearchUniformXys=this.gl.getUniformLocation(this.glHeadSearchDrawShaderProgram,"uxys"),this.headSearchUniformVideoTransformMat2=this.gl.getUniformLocation(this.glHeadSearchDrawShaderProgram,"videoTransformMat2"),this.gl.useProgram(this.glHeadSearchDrawShaderProgram),this.gl.uniform1i(o,0)}drawHeadSearch(e){this.gl.viewport(0,0,this.cv.width,this.cv.height),this.gl.useProgram(this.glHeadSearchDrawShaderProgram),this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,this.videoTexture),this.gl.uniform3f(this.headSearchUniformXys,e.x,e.y,e.s),this.gl.uniformMatrix2fv(this.headSearchUniformVideoTransformMat2,!1,this.videoTransformMat2),this.gl.drawElements(this.gl.TRIANGLES,3,this.gl.UNSIGNED_SHORT,0)}}t.default=n},341:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.initHeadControl=t.default=void 0;const i=n(o(800));var a=o(800);Object.defineProperty(t,"default",{enumerable:!0,get:function(){return n(a).default}}),t.initHeadControl=()=>new Promise(((e,t)=>{const o=new i.default("head-preview",{onReady:()=>{console.log("head control is ready"),e()},onCameraPersmissionFailed:()=>alert("This game is head-controlled. You need to enable camera to play the game.")});o.toggle(!0),o.addEventListener("mouse opened",(()=>console.log("mouse opened"))),o.addEventListener("mouse closed",(()=>console.log("mouse closed"))),o.addEventListener("left",(()=>console.log("left"))),o.addEventListener("right",(()=>console.log("right")))}))},8:function(){var e=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(i,a){function r(e){try{d(n.next(e))}catch(e){a(e)}}function s(e){try{d(n.throw(e))}catch(e){a(e)}}function d(e){var t;e.done?i(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}d((n=n.apply(e,t||[])).next())}))};"createImageBitmap"in window||(window.createImageBitmap=function(t){return e(this,void 0,void 0,(function*(){return new Promise(((e,o)=>{let n=document.createElement("img");n.addEventListener("load",(function(){e(this)})),n.src=URL.createObjectURL(t)}))}))})},717:function(e,t,o){"use strict";var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(i,a){function r(e){try{d(n.next(e))}catch(e){a(e)}}function s(e){try{d(n.throw(e))}catch(e){a(e)}}function d(e){var t;e.done?i(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}d((n=n.apply(e,t||[])).next())}))};let i;Object.defineProperty(t,"__esModule",{value:!0}),t.initImageCapture=t.takePhoto=void 0,o(505),o(8);let a=!1;t.takePhoto=()=>n(void 0,void 0,void 0,(function*(){i&&(yield i.takePhoto().then((e=>createImageBitmap(e))).then((e=>{const t=document.querySelector("#takePhotoCanvas");t.style.display="block",function(e,t){e.width=getComputedStyle(e).width.split("px")[0],e.height=getComputedStyle(e).height.split("px")[0];let o=Math.min(e.width/t.width,e.height/t.height),n=(e.width-t.width*o)/2,i=(e.height-t.height*o)/2;e.getContext("2d").clearRect(0,0,e.width,e.height),e.getContext("2d").drawImage(t,0,0,t.width,t.height,n,i,t.width*o,t.height*o)}(t,e)})))})),t.initImageCapture=()=>n(void 0,void 0,void 0,(function*(){return a?Promise.resolve():(a=!0,navigator.mediaDevices.getUserMedia({video:!0}).then((e=>{try{const t=e.getVideoTracks()[0];i=new ImageCapture(t),console.log("image capture initied")}catch(e){throw e}})).catch((()=>{alert("Image capture is not supported on your device :(")})))}))},614:function(e,t){"use strict";var o=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(i,a){function r(e){try{d(n.next(e))}catch(e){a(e)}}function s(e){try{d(n.throw(e))}catch(e){a(e)}}function d(e){var t;e.done?i(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}d((n=n.apply(e,t||[])).next())}))};let n;Object.defineProperty(t,"__esModule",{value:!0}),t.saySomething=t.setUpUser=t.PHRASES=t.initVoiceService=void 0,t.initVoiceService=()=>o(void 0,void 0,void 0,(function*(){return new Promise((e=>{setTimeout((()=>{n=window.speechSynthesis.getVoices().find((({lang:e})=>"en-GB"===e)),n?(console.log("voice init"),e(!0)):t.initVoiceService().then(e)}),500)}))})),t.PHRASES={HELLO:"`Hi, %username%. Have a good game",RIGHT:"Good right turn, %username%"};let i="";t.setUpUser=e=>{i=e},t.saySomething=e=>{if(!n)return;const t=new SpeechSynthesisUtterance(e.replace("%username%",i));t.voice=n,t.volume=1,t.pitch=1,t.rate=1,speechSynthesis.cancel(),speechSynthesis.speak(t)}}},t={};function o(n){if(t[n])return t[n].exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,o),i.exports}o.d=function(e,t){for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o(607)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,